==== About ====
Unicornel is a multi-process, multi-architecture emulator server
with concurrency and system call support. All processes of any architecture
share the underlying kernel, and can interact with each other via
system calls and in particular a lightweight shared memory interface.

==== Starting processes ====
In order to start a new process, you must first send a unicornelf header,
which naturally bears no resemblance whatsoever to the actual ELF standard:
struct unicornelf {
    uc_arch arch; //Desired unicorn-supported ISA
    uc_mode mode; //Desired unicorn-supported mode
    struct {
        unsigned long va; //Virtual address to map
        unsigned long length; //Length of memory to map
    } maps[4]; //Up to 4 mappings supported
    unsigned short code_length; //The length of the code to follow the unicornelf header
    unsigned char num_maps; //The number of mappings initialized in the maps array
};
Following the unicornelf header should be <code length> bytes of assembled machine code
in the specified instruction set architecture.

NOTE: Any feedback about the unicornelf format should be submitted to:
https://docs.google.com/forms/d/e/1FAIpQLSck2N2w5J84iu7CKYlGkEmwn1Xsjtl5Jmlm_4t2DfC8vwNLOw/viewform?usp=sharing&resourcekey=0--aU-tRVYI9eI9UCRMuEMfQ

There MUST be at least one mapping specified - the first mapping ALWAYS stores the
uploaded machine code. Any unused maps array elements can be set to whatever values you want, and unicornelf will dutifully ignore them.

After receiving the unicornelf and <code length> bytes of machine code, the "process" will
be automatically started on a new POSIX thread. The lowest available pid is assigned to the process. Bear in mind that this pid is utterly unrelated to the actual Linux tid of the 
thread.

==== Process Limitations ====
There can only be up to 8 processes at a time.
There can only be one process per architecture at a time. (e.g. you cannot have two x86 processes)

==== Process lifetime ====
Processes execute until one of the following conditions:
 - The exit syscall is called by the process
 - The process executes the last instruction in the uploaded assembly code
 - The process encounters some exception condition
 - The client connection to the Unicornel is terminated (all processes
   unceremoniously terminate)

==== System Call conventions ====
The system call interface is invoked whenever an interrupt is generated by the uploaded
and executing machine code. System call arguments are passed in on all architectures via
registers. The system call number is always arg0 (e.g. rax on x86).
The remaining 3 arguments are used to pass whatever data is needed to the syscall.

The register to arguments mappings for all architectures is defined by the call_regs array. Each element index of the inner per-architecture array element corresponds to the given argument index:
static unsigned int call_regs[UC_ARCH_MAX][4] = {
    {0,0,0,0}, //NONE
    {UC_ARM_REG_R0,UC_ARM_REG_R1,UC_ARM_REG_R2,UC_ARM_REG_R3}, //UC_ARCH_ARM
    {UC_ARM64_REG_X0,UC_ARM64_REG_X1,UC_ARM64_REG_X2,UC_ARM64_REG_X3}, //UC_ARCH_ARM64
    {UC_MIPS_REG_A0,UC_MIPS_REG_A1,UC_MIPS_REG_A2,UC_MIPS_REG_A3}, //UC_ARCH_MIPS
    {UC_X86_REG_RAX,UC_X86_REG_RBX,UC_X86_REG_RCX,UC_X86_REG_RDX}, //UC_ARCH_X86
    {UC_PPC_REG_0,UC_PPC_REG_1,UC_PPC_REG_2,UC_PPC_REG_3}, //UC_ARCH_PPC
    {UC_SPARC_REG_O0,UC_SPARC_REG_O1,UC_SPARC_REG_O2,UC_SPARC_REG_O3}, //UC_ARCH_SPARC
    {UC_M68K_REG_D0,UC_M68K_REG_D1,UC_M68K_REG_D2,UC_M68K_REG_D3}, //UC_ARCH_M68K
    {UC_RISCV_REG_A0,UC_RISCV_REG_A1,UC_RISCV_REG_A2,UC_RISCV_REG_A3}, //UC_ARCH_RISCV
    {UC_S390X_REG_R0,UC_S390X_REG_R1,UC_S390X_REG_R2,UC_S390X_REG_R3}, //UC_ARCH_S390X
    {UC_TRICORE_REG_D0,UC_TRICORE_REG_D1,UC_TRICORE_REG_D2,UC_TRICORE_REG_D3}, //UC_ARCH_TRICORE
};

E.g. for an X86 process to call unicornel_write, you would set rax to 1 (the unicornel write syscall number), rbx to the location of the buffer to write, and rcx to the number of bytes to write.

==== Supported system calls ====
There are 11 supported system calls:
    Syscall Name     #
    unicornel_exit   0
    unicornel_write  1
    print_integer    2
    create_shared    3
    map_shared       4
    unmap_shared     5
    bookmark         6
    unicornel_rewind 7
    switch_arch      8
    unicornel_pause  9
    unicornel_resume 10

void unicornel_exit();
  Terminates the calling process
  This function never returns

long unicornel_write(void* buf, size_t count);
  Write up to count bytes from the buffer at buf to the unicornel client (eventually sent over the socket).
  Returns the number of bytes written, or an error code if there was a failure.

void-ish print_integer(long integer);
  Write the argument as an ASCII base-10 integer to the unicornel client.
  Always returns 0.

long create_shared(unsigned long length);
  Creates a new shared memory buffer of the specified length
  Returns a handle to the buffer to be used with map_shared later, or an error code.

long map_shared(void* addr,unsigned long length, unsigned long handle);
  Map a shared buffer previously created with create_shared at the address addr.
  Lengths less than the size of the shared buffer are ok.
  Returns 0 on success, or an error code.
  NOTE:
  A process can only have one shared buffer mapped at a time, but multiple processes can map the same shared buffer at the same time.

long unmap_shared();
  Unmaps a previously mapped shared buffer
  Returns 0 on success or an error code
  WARNING:
  If this was the last mapping of the shared buffer, the shared buffer will be destroyed
  and the handle released to be used for new created shared buffers

long bookmark();
  Bookmark the current processor state to return to later with rewind().
  Returns 0 on success or an error code.
  NOTE:
  You can only have one bookmark at a time.
  Once a bookmark is created, it cannot be destroyed or reset except by
  switching architectures. You can rewind to the same bookmark multiple times.

long unicornel_rewind();
  Rewind the processor to the state previously saved by bookmark().
  Returns 0 on success or an error code.
  NOTE:
  This does not rewind writes to memory, but will rewind (and unmap) shared
  buffers that were mapped since the bookmark'd processor state.
  WARNING:
  While shared buffer mappings can be rewound, shared buffer *unmappings* cannot be in order
  to avoid potential UAF issues. This feature may be added in future versions....

void switch_arch(uc_arch arch, uc_mode mode, void* new_pc);
  Switch the instruction set architecture used by this process, and long jump to new_pc
  Mappings (including shared mappings) and memory contents are preserved across the switch.
  CPU State (including registers and bookmarks) are discarded.
  Ensure any desired state to pass across the ISA barrier is saved to memory beforehand.
  This system call does not (really) "return", and no return value is specified.
  NOTE:
  In order to prevent the numerous developer headaches that would otherwise result, a process 
  can only transition architectures once in its lifetime.
  WARNING:
  Any shared buffer mappings have an additional refcount "zombified".
  This additional reference will be destroyed when the process exits. This means that a
  shared buffer may not be mapped anywhere, and yet still exist and be mappable. This is
  not considered a bug, but it's not really a feature either.

void-ish unicornel_pause();
  Pause the current process until another process calls unicornel_resume() with the
  appropriate pid
  This system call always succeeds, and always returns 0.

long unicornel_resume(unsigned long pid)
  Resume the process specified by pid.
  Returns 0 on success, or an error code.